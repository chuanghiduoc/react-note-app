{"ast":null,"code":"var _jsxFileName = \"/Users/levanbaotrong/react-note-app/client/src/components/NoteList.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { List, Button } from 'antd';\n\n// function NoteList({ notes, handleDeleteNote }) {\n//   return (\n//     <List\n//       dataSource={notes}\n//       renderItem={(note) => (\n//         <List.Item\n//           actions={[\n//             <Button type=\"link\" danger onClick={() => handleDeleteNote(note._id)}>\n//               Xoá\n//             </Button>,\n//           ]}\n//         >\n//           {note.text}\n//         </List.Item>\n//       )}\n//     />\n//   );\n// }\n\n// export default NoteList;\n\n// NoteList.js (React component)\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { Form, Input, Button } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteList = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  // Lấy token từ localStorage\n  const token = localStorage.getItem('token');\n\n  // Giải mã token để lấy userId\n  const decodedToken = jwt_decode(token);\n  const userId = decodedToken.userId;\n  useEffect(() => {\n    // Gửi yêu cầu GET để lấy danh sách các ghi chú của người dùng\n    axios.get(`http://localhost:3001/api/notes/${userId}`).then(response => {\n      setNotes(response.data);\n    }).catch(error => {\n      console.error('Failed to fetch notes', error);\n    });\n  }, [userId]);\n  const handleDeleteNote = noteId => {\n    // Gửi yêu cầu DELETE để xoá ghi chú\n    axios.delete(`http://localhost:3001/api/notes/${userId}/${noteId}`).then(() => {\n      // Cập nhật danh sách ghi chú sau khi xoá\n      setNotes(prevNotes => prevNotes.filter(note => note._id !== noteId));\n    }).catch(error => {\n      console.error('Failed to delete note', error);\n    });\n  };\n  const handleAddNote = () => {\n    // Gửi yêu cầu POST để thêm ghi chú mới\n    axios.post(`http://localhost:3001/api/notes`, {\n      userId,\n      content: newNote\n    }).then(response => {\n      // Cập nhật danh sách ghi chú sau khi thêm ghi chú mới\n      setNotes(prevNotes => [...prevNotes, response.data]);\n      // Xóa nội dung ghi chú trong form\n      setNewNote('');\n    }).catch(error => {\n      console.error('Failed to add note', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    name: \"basic\",\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"N\\u1ED9i dung ghi ch\\xFA\",\n      name: \"note\",\n      rules: [{\n        required: true,\n        message: 'Vui lòng nhập nội dung ghi chú!'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n        autoSize: {\n          minRows: 3,\n          maxRows: 6\n        } // Điều này cho phép nội dung xuống dòng khi nội dung dài hơn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Th\\xEAm Ghi Ch\\xFA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteList, \"7d63h4D9Z9E2lz7Z7iuTh8qNBKM=\");\n_c = NoteList;\nexport default NoteList;\nvar _c;\n$RefreshReg$(_c, \"NoteList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jwt_decode","Form","Input","Button","jsxDEV","_jsxDEV","NoteList","_s","notes","setNotes","newNote","setNewNote","token","localStorage","getItem","decodedToken","userId","get","then","response","data","catch","error","console","handleDeleteNote","noteId","delete","prevNotes","filter","note","_id","handleAddNote","post","content","name","onFinish","children","Item","label","rules","required","message","TextArea","autoSize","minRows","maxRows","fileName","_jsxFileName","lineNumber","columnNumber","type","htmlType","_c","$RefreshReg$"],"sources":["/Users/levanbaotrong/react-note-app/client/src/components/NoteList.js"],"sourcesContent":["// import React from 'react';\n// import { List, Button } from 'antd';\n\n// function NoteList({ notes, handleDeleteNote }) {\n//   return (\n//     <List\n//       dataSource={notes}\n//       renderItem={(note) => (\n//         <List.Item\n//           actions={[\n//             <Button type=\"link\" danger onClick={() => handleDeleteNote(note._id)}>\n//               Xoá\n//             </Button>,\n//           ]}\n//         >\n//           {note.text}\n//         </List.Item>\n//       )}\n//     />\n//   );\n// }\n\n// export default NoteList;\n\n// NoteList.js (React component)\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { Form, Input, Button } from 'antd';\n\nconst NoteList = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  // Lấy token từ localStorage\n  const token = localStorage.getItem('token');\n  \n  // Giải mã token để lấy userId\n  const decodedToken = jwt_decode(token);\n  const userId = decodedToken.userId;\n  useEffect(() => {\n    // Gửi yêu cầu GET để lấy danh sách các ghi chú của người dùng\n    axios.get(`http://localhost:3001/api/notes/${userId}`)\n      .then(response => {\n        setNotes(response.data);\n      })\n      .catch(error => {\n        console.error('Failed to fetch notes', error);\n      });\n  }, [userId]);\n\n  const handleDeleteNote = (noteId) => {\n    // Gửi yêu cầu DELETE để xoá ghi chú\n    axios.delete(`http://localhost:3001/api/notes/${userId}/${noteId}`)\n      .then(() => {\n        // Cập nhật danh sách ghi chú sau khi xoá\n        setNotes(prevNotes => prevNotes.filter(note => note._id !== noteId));\n      })\n      .catch(error => {\n        console.error('Failed to delete note', error);\n      });\n  };\n\n  const handleAddNote = () => {\n    // Gửi yêu cầu POST để thêm ghi chú mới\n    axios.post(`http://localhost:3001/api/notes`, { userId, content: newNote })\n      .then(response => {\n        // Cập nhật danh sách ghi chú sau khi thêm ghi chú mới\n        setNotes(prevNotes => [...prevNotes, response.data]);\n        // Xóa nội dung ghi chú trong form\n        setNewNote('');\n      })\n      .catch(error => {\n        console.error('Failed to add note', error);\n      });\n  };\n\n  return (\n    <Form\n      name=\"basic\"\n      onFinish={onFinish}\n    >\n      <Form.Item\n        label=\"Nội dung ghi chú\"\n        name=\"note\"\n        rules={[\n          {\n            required: true,\n            message: 'Vui lòng nhập nội dung ghi chú!',\n          },\n        ]}\n      >\n        <Input.TextArea\n          autoSize={{ minRows: 3, maxRows: 6 }} // Điều này cho phép nội dung xuống dòng khi nội dung dài hơn\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Thêm Ghi Chú\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n  \n};\n\nexport default NoteList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}